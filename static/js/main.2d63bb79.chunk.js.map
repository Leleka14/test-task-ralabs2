{"version":3,"sources":["components/HeaderComponent.js","components/ForecastComponent.js","components/MainComponent.js","utils/requests.js","utils/API.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderComponent","className","ForecastComponent","props","createDescription","temp","rain","clouds","wind","text","Math","floor","random","createFormatedDate","date","newDate","Date","getDate","Intl","DateTimeFormat","month","format","RenderList","weatherData","console","log","list","data","map","el","Card","Accordion","Toggle","as","Header","eventKey","ts","toString","Container","datetime","alt","width","src","weather","icon","min_temp","max_temp","Collapse","Body","pop","round","wind_spd","rh","Fragment","city_name","length","defaultActiveKey","MainComponent","useState","city","setcity","inputValue","setInputValue","setWeather","getGeo","position","lat","coords","latitude","long","longitude","axios","create","baseURL","get","then","res","region","useEffect","navigator","geolocation","getCurrentPosition","weatherRequest","Form","FormGroup","Row","Input","placeholder","value","onChange","event","target","Button","type","onClick","preventDefault","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wRAQeA,EANS,WACpB,OACI,oBAAIC,UAAU,SAAd,kC,gCCmIOC,EAnIW,SAAAC,GAGtB,IAAMC,EAAoB,SAACC,EAAMC,EAAMC,EAAQC,GAC3C,IAAIC,EAAO,GAyDX,OAXGJ,GAAQ,KAAII,GAAI,UA7CM,CACrB,wEACA,yDACA,0DA0CyCC,KAAKC,MAAuB,EAAjBD,KAAKE,aAC1DP,GAAQ,IAAMA,EAAO,KAAII,GAAI,WAzCN,CACtB,4BACA,gFACA,uEAsCwDC,KAAKC,MAAuB,EAAjBD,KAAKE,aACzEP,EAAO,KAAII,GAAI,WArCQ,CACtB,uEACA,mEACA,gEAkC0CC,KAAKC,MAAuB,EAAjBD,KAAKE,aAC3DN,EAAO,KAAIG,GAAI,WAjCG,CACjB,kBACA,6DACA,yEA8BqCC,KAAKC,MAAuB,EAAjBD,KAAKE,aACtDN,GAAQ,IAAMA,EAAO,KAAIG,GAAI,WA7BJ,CACxB,wDACA,sEACA,yCA0B0DC,KAAKC,MAAuB,EAAjBD,KAAKE,aAC3EN,GAAQ,KAAIG,GAAI,WAzBA,CACf,2DACA,kCACA,qDAsBoCC,KAAKC,MAAuB,EAAjBD,KAAKE,aACrDL,GAAU,KAAIE,GAAI,WAjBjB,oBAkBDF,EAAS,IAAMA,GAAU,KAAIE,GAAI,WAfhC,mCAgBDF,EAAS,KAAIE,GAAI,WAtBhB,wBAuBDD,GAAQ,IAAGC,GAAI,WAXd,2BAYDD,EAAO,IAAGC,GAAI,WAfb,uBAgBGA,GAILI,EAAqB,SAAAC,GACvB,IAAMC,EAAU,IAAIC,KAAKF,GAEzB,MADgB,UAAMC,EAAQE,UAAd,YAA2B,IAAIC,KAAKC,eAAe,QAAS,CAACC,MAAO,SAASC,OAAON,KAKlGO,EAAa,WACf,GAAGnB,EAAMoB,YAAY,CACjBC,QAAQC,IAAItB,EAAMoB,aAClB,IAAMG,EAAOvB,EAAMoB,YAAYI,KAAKC,KAAI,SAACC,GACrC,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAUC,OAAX,CAAkBC,GAAIH,IAAKI,OAAQC,SAAUN,EAAGO,GAAGC,WAAnD,SACI,cAACC,EAAA,EAAD,UACI,eAAC,IAAD,WACI,qBAAKrC,UAAU,iBAAf,SAAiCY,EAAmBgB,EAAGU,YACvD,qBAAKtC,UAAU,QAAf,SAAuB,qBAAKuC,IAAI,YAAYC,MAAM,OAAOC,IAAG,qDAAgDb,EAAGc,QAAQC,KAA3D,YAC5D,sBAAK3C,UAAU,QAAf,UACI,8BAAK,0CAAa4B,EAAGgB,SAAhB,YACL,8BAAK,0CAAahB,EAAGiB,SAAhB,sBAKrB,cAACf,EAAA,EAAUgB,SAAX,CAAoBZ,SAAUN,EAAGO,GAAGC,WAApC,SACA,cAACP,EAAA,EAAKkB,KAAN,UACI,gCACI,eAAC,IAAD,WACI,qBAAK/C,UAAU,iBAAiBuC,IAAI,YAAYC,MAAM,QAAQC,IAAG,qDAAgDb,EAAGc,QAAQC,KAA3D,UACjE,sBAAK3C,UAAU,kBAAf,UACI,sDAAyB4B,EAAGxB,KAA5B,WACA,+DAAkCwB,EAAGoB,IAArC,OACA,6CAAgBvC,KAAKwC,MAAMrB,EAAGsB,UAA9B,SACA,2CAActB,EAAGuB,GAAjB,aAGR,8BAAMhD,EAAkByB,EAAGxB,KAAMwB,EAAGoB,IAAKpB,EAAGtB,OAAQsB,EAAGsB,qBAzBxDtB,EAAGO,OAgCtB,OACI,eAAC,IAAMiB,SAAP,WACI,qBAAIpD,UAAU,eAAd,wBAAyCE,EAAMoB,YAAY+B,UAA3D,KAAwEzC,EAAmBV,EAAMoB,YAAYI,KAAK,GAAGY,UAArH,MAAmI1B,EAAmBV,EAAMoB,YAAYI,KAAKxB,EAAMoB,YAAYI,KAAK4B,OAAS,GAAGhB,aAChN,cAACR,EAAA,EAAD,CAAWyB,iBAAgB,UAAKrD,EAAMoB,YAAYI,KAAK,GAAGS,IAAMnC,UAAU,kBAA1E,SACKyB,OAMb,OAAO,yBAIf,OACI,8BACI,cAACJ,EAAD,O,iBCpEGmC,EAvDO,WAAO,IAAD,EAEAC,mBAAS,IAFT,mBAEjBC,EAFiB,KAEXC,EAFW,OAGYF,mBAAS,IAHrB,mBAGjBG,EAHiB,KAGLC,EAHK,OAIMJ,qBAJN,mBAIjBf,EAJiB,KAIRoB,EAJQ,KAOlBC,EAAS,SAAAC,GACX,OCL4BC,EDKDD,EAASE,OAAOC,SCLVC,EDKoBJ,EAASE,OAAOG,UCJlEC,IAAMC,OAAO,CAChBC,QAAQ,sDAAD,OCPgB,mCDOhB,kBAAwFP,EAAxF,YAA+FG,MDGtBK,IAAI,IAC/EC,MAAK,SAAAC,GAAG,OAAIhB,EAAQgB,EAAIjD,KAAKA,KAAK,GAAGkD,WCNf,IAACX,EAAKG,GDUrCS,qBAAU,WACNC,UAAUC,YAAYC,mBAAmBjB,EAAQxC,QAAQC,OAC1D,IAGHqD,qBAAU,WACM,KAATnB,GCtBmB,SAACA,GAC3B,OAAOY,IAAMC,OAAO,CAChBC,QAAQ,GAAD,OCLQ,gDDKR,iBAA4Bd,EAA5B,gBCJW,sCFyBduB,CAAevB,GAAMe,IAAI,IACpBC,MAAK,SAAAC,GAAG,OAAIb,EAAWa,EAAIjD,WAErC,CAACgC,IAgBJ,OACI,sBAAK1D,UAAU,YAAf,UACI,cAAC,EAAD,IACA,cAACkF,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,YAAY,YAAYC,MAAO3B,EAAY4B,SAV3C,SAAAC,GACvB5B,EAAc4B,EAAMC,OAAOH,QASqEvF,UAAU,qBAC1F,eAAC2F,EAAA,EAAD,CAAQC,KAAK,SAASC,QApBf,SAACJ,GACN,KAAf7B,IACCD,EAAQC,GACRC,EAAc,KAElB4B,EAAMK,kBAe6D9F,UAAU,iBAAiB+F,MAAM,UAApF,UAA8F,mBAAG/F,UAAU,uBAAyB,gDAIhJ,cAAC,EAAD,CAAmBsB,YAAaoB,QG7C7BsD,MARf,WACE,OACE,qBAAKhG,UAAU,MAAf,SACE,cAAC,EAAD,OCMSiG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCEdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2d63bb79.chunk.js","sourcesContent":["import React from 'react'\r\n \r\nconst HeaderComponent = () => {\r\n    return(\r\n        <h2 className=\"header\">Weather Portal v2.0</h2>\r\n    )\r\n}\r\n\r\nexport default HeaderComponent;","import React from 'react';\r\nimport { Accordion, Card, Row, Container } from 'react-bootstrap';\r\n\r\n\r\nconst ForecastComponent = props => {\r\n\r\n    //creates description\r\n    const createDescription = (temp, rain, clouds, wind) => {\r\n        let text = '';\r\n        let arrayForHotWeather = [\r\n            \"You should wear something light as it will be warm, more than 15째.\", \r\n            \"If i was you, i would wear shorts as it would be warm.\",\r\n            \"Don't wear anything with longsleeves, it will be warm.\"\r\n        ];\r\n        let arrayForCoolWeather = [\r\n            \"It would be cool weather.\",\r\n            \"Temperature wouldn't be too low, but wouldn't be too high either, be careful.\",\r\n            \"In my opinion this would be perfect temperature, not high, not low.\"\r\n        ];\r\n        let arrayForColdWeather = [\r\n            \"I recommend you to wear coat, temparature would be less than 10째.\",\r\n            \"Be careful, it seems like it's still cool weather, but it's not.\",\r\n            \"It's easy to catch a cold, you should put on something warm.\"\r\n        ];\r\n        let arrayForNoRain = [\r\n            \"No rain at all.\",\r\n            \"Gods of rain told me that they would be merciful this day.\",\r\n            \"Nothing will fall from sky, unless some bird will be flying over you.\"\r\n        ];\r\n        let arrayForSmallProbRain = [\r\n            \"It shouldn't be raining, but there is a small chance.\",\r\n            \"You should look at the sky from time to time, small chance of rain.\",\r\n            \"There is a small probability if rain.\"\r\n        ]\r\n        let arrayForRain = [\r\n            \"You really should take an umbrella, it would be raining.\",\r\n            \"There is a high chance of rain.\",\r\n            \"Don't plan anything outside, it would be raining.\"\r\n        ];\r\n        let arrayForClearSky = [\r\n            \"Sky would be clear.\"\r\n        ];\r\n        let arrayForClouds = [\r\n            \"It will cloudy.\"\r\n        ];\r\n        let arrayForHalfClouds = [\r\n            \"Half of sky will be in clouds.\"\r\n        ]\r\n        let arrayForWeakWind = [\r\n            \"Wind will be weak.\"\r\n        ];\r\n        let arrayForPowerWind = [\r\n            \"It also will be windy.\"\r\n        ];\r\n        if(temp >= 18) text += `${arrayForHotWeather[Math.floor(Math.random() * (3))]}`\r\n        if(temp >= 10 && temp < 18) text += ` ${arrayForCoolWeather[Math.floor(Math.random() * (3))]}`\r\n        if(temp < 10) text += ` ${arrayForColdWeather[Math.floor(Math.random() * (3))]}`\r\n        if(rain < 10) text += ` ${arrayForNoRain[Math.floor(Math.random() * (3))]}`\r\n        if(rain >= 10 && rain < 50) text += ` ${arrayForSmallProbRain[Math.floor(Math.random() * (3))]}`\r\n        if(rain >= 50) text += ` ${arrayForRain[Math.floor(Math.random() * (3))]}`\r\n        if(clouds >= 70) text += ` ${arrayForClouds[0]}`\r\n        if(clouds < 70 && clouds >= 30) text += ` ${arrayForHalfClouds[0]}`\r\n        if(clouds < 30) text += ` ${arrayForClearSky[0]}`\r\n        if(wind >= 5) text += ` ${arrayForPowerWind[0]}`\r\n        if(wind < 5) text += ` ${arrayForWeakWind[0]}`\r\n        return text;\r\n    };\r\n\r\n    //creates formated date\r\n    const createFormatedDate = date => {\r\n        const newDate = new Date(date)\r\n        const formatDate = `${newDate.getDate()} ${new Intl.DateTimeFormat('en-US', {month: \"long\"}).format(newDate)}`\r\n        return formatDate;\r\n    }\r\n\r\n    //renders list of weather if props.weatherData exists\r\n    const RenderList = () => {\r\n        if(props.weatherData){\r\n            console.log(props.weatherData)\r\n            const list = props.weatherData.data.map((el) => {\r\n                return (\r\n                    <Card key={el.ts}>\r\n                        <Accordion.Toggle as={Card.Header} eventKey={el.ts.toString()}>\r\n                            <Container>\r\n                                <Row>\r\n                                    <div className=\"col-5 col-lg-3\">{createFormatedDate(el.datetime)}</div>\r\n                                    <div className=\"col-2\"><img alt=\"Not Found\" width=\"40px\" src={`https://www.weatherbit.io/static/img/icons/${el.weather.icon}.png`}/></div>\r\n                                    <div className=\"col-4\">\r\n                                        <div><small>min: {el.min_temp}째</small></div>\r\n                                        <div><small>max: {el.max_temp}째</small></div>\r\n                                    </div>\r\n                                </Row>\r\n                            </Container>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey={el.ts.toString()}>\r\n                        <Card.Body>\r\n                            <div>\r\n                                <Row>\r\n                                    <img className=\"col-4 col-sm-4\" alt=\"Not Found\" width=\"100px\" src={`https://www.weatherbit.io/static/img/icons/${el.weather.icon}.png`}/>\r\n                                    <div className=\"col-12 col-sm-8\">\r\n                                        <p>Average Temperature: {el.temp}째C</p>\r\n                                        <p>Probability of Precipitation: {el.pop}%</p>\r\n                                        <p>Wind speed: {Math.round(el.wind_spd)}m/s</p>\r\n                                        <p>Humidity: {el.rh}%</p>\r\n                                    </div>\r\n                                </Row>\r\n                                <div>{createDescription(el.temp, el.pop, el.clouds, el.wind_spd)}</div>\r\n                            </div>\r\n                        </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card> \r\n                )\r\n            })\r\n            return(\r\n                <React.Fragment>\r\n                    <h4 className=\"weather-head\">Weather in {props.weatherData.city_name}, {createFormatedDate(props.weatherData.data[0].datetime)} - {createFormatedDate(props.weatherData.data[props.weatherData.data.length - 1].datetime)}</h4>\r\n                    <Accordion defaultActiveKey={`${props.weatherData.data[0].ts}`} className=\"col-12 col-lg-6\">\r\n                        {list}\r\n                    </Accordion>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        else{\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <RenderList/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ForecastComponent;\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Form, FormGroup, Input, Row } from 'reactstrap';\r\nimport HeaderComponent from './HeaderComponent';\r\nimport ForecastComponent from './ForecastComponent';\r\nimport { findLocationRequest, weatherRequest } from '../utils/requests'\r\n\r\nconst MainComponent = () => {\r\n\r\n    const [city, setcity] = useState('');\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [weather, setWeather] = useState();\r\n\r\n    //Function that call axios to fetch geo API to find user's current city by his coordinates\r\n    const getGeo = position => {\r\n        return findLocationRequest(position.coords.latitude, position.coords.longitude).get('')\r\n            .then(res => setcity(res.data.data[0].region))\r\n    }\r\n\r\n    //Hook that executes only once after page is rendered to locate user's current position, equivalent to componentDidMount\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(getGeo, console.log);\r\n    }, []);\r\n\r\n    //Hook that executes when city changes to fetch weather in this city\r\n    useEffect(() => {\r\n        if(city !== ''){\r\n            weatherRequest(city).get('')\r\n                .then(res => setWeather(res.data))\r\n        }\r\n    }, [city]);\r\n\r\n    //sets city from user's input value \r\n    const submitInputHandler = (event) => {\r\n        if(inputValue !== ''){\r\n            setcity(inputValue);\r\n            setInputValue('');\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    //sets inputValue when input field is changed\r\n    const inputChangeHandler = event => {\r\n        setInputValue(event.target.value)\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <HeaderComponent/>\r\n            <Form>\r\n                <FormGroup>\r\n                    <Row>\r\n                        <Input placeholder=\"Type city\" value={inputValue} onChange={inputChangeHandler} className=\"col-10 col-md-6 \"/>\r\n                        <Button type=\"submit\" onClick={submitInputHandler} className=\"col-2 col-md-1\" color=\"success\"><i className=\"fa fa-lg fa-search\"></i><sub>...</sub></Button>\r\n                    </Row>\r\n                </FormGroup>\r\n            </Form>\r\n            <ForecastComponent weatherData={weather}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainComponent;","import axios from 'axios';\r\nimport * as API from './API'\r\n\r\nexport const weatherRequest = (city) => {\r\n    return axios.create({\r\n        baseURL: `${API.weatherAPI}?city=${city}&key=${API.weatherAPIKey}`\r\n    })\r\n}\r\n\r\nexport const findLocationRequest = (lat, long) => {\r\n    return axios.create({\r\n        baseURL: `http://api.positionstack.com/v1/reverse?access_key=${API.reverseTrackAPIKey}&query=${lat},${long}`\r\n    })\r\n}","export const weatherAPI = `https://api.weatherbit.io/v2.0/forecast/daily`;\r\nexport const weatherAPIKey = `552d1850c10d4272aff7ab2676c84424`;\r\nexport const weatherIcon = `https://www.weatherbit.io/static/img/icons/`;\r\nexport const googleAPIKey = `AIzaSyBOWt0A4oqce6vMMSuwUcJdY0P3EOAESXo`;\r\nexport const reverseTrackAPIKey = `29503943e43100352ab460a761bd9a9c`;","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}